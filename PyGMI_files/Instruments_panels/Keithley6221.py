# -*- coding: utf-8 -*-
from PySide.QtGui import QWidget,QApplication
from PySide.QtCore import QTimer
#import the interface design generated by Qt designer
import Keithley6221_Ui


class Panel(QWidget):
    def __init__(self,parent=None,instr=None,lock=None,title='Instrument Panel'):
        # This class derivates from a Qt Widget so we have to call
        # the class builder ".__init__()"
        QWidget.__init__(self)
        # "self" is now a Qt Widget, then we load the user interface
        # generated with QtDesigner and call it self.ui
        self.ui = Keithley6221_Ui.Ui_Panel()
        # Now we have to feed the GUI building method of this object (self.ui)
        # with the current Qt Widget 'self', but the widgets from the design will actually be built as children
        # of the object self.ui
        self.ui.setupUi(self)
        self.setWindowTitle(title)
        self.reserved_access_to_instr=lock
        self.instr=instr
        self.monitor_timer = QTimer()
        #The timer would not wait for the completion of the task otherwise
        self.monitor_timer.setSingleShot(True)
        self.monitor_timer.timeout.connect(self.monitor)
        self.firsttime=0
        #bug: if the box is checked in the .ui file, the system freezes
        #if self.ui.monitor.isChecked():self.monitor()
    

    def monitor(self,state=1):
        if state!=1:
            self.monitor_timer.stop()
        elif state and not(self.monitor_timer.isActive()):
            with self.reserved_access_to_instr:
                I=self.instr.query_current_source_amplitude()
                Vcomp=self.instr.query_voltage_compliance()
                outstate=self.instr.query_output_ON()
            self.ui.I_disp.setText(str(I*1e6)+u' Î¼A')
            self.ui.V_disp.setText(str(Vcomp)+' V')
            self.ui.outputON.setChecked(outstate)
            self.monitor_timer.start(self.ui.refresh_rate.value()*1000)
        
    
    def update_timer_timeout(self,secs):
        #The value must be converted to milliseconds            
        self.monitor_timer.setInterval(secs*1000)
    
    def change_I(self,value=0):
        with self.reserved_access_to_instr:
            self.instr.set_current_source_amplitude(value*1e6)                
                
    def change_V_comp(self,value=0):
        with self.reserved_access_to_instr:                
            self.instr.set_voltage_compliance(value)                

    def switch_output(self,value=False):
        if value:                
            with self.reserved_access_to_instr:
                self.instr.output_ON()
        else:
            with self.reserved_access_to_instr:
                self.instr.output_OFF()

    def reset_inst(self):
        with self.reserved_access_to_instr:
            self.instr.reset()
        
    
if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    window = Panel(app)
    window.show()
    sys.exit(app.exec_())
